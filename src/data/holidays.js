/**
 * Hazri System Holidays Data
 * Focuses on Islamic holidays and Pakistani government holidays
 * Integrates with Google Calendar for future updates
 */

// Fixed Islamic holidays for 2025
// Note: Islamic dates can vary by location/observation
export const islamicHolidays2025 = [
  { date: '2025-01-06', name: 'Ashura (10th of Muharram)' },
  { date: '2025-02-07', name: 'Shab-e-Miraj' },
  { date: '2025-02-22', name: 'Shab-e-Barat' },
  { date: '2025-03-01', name: 'Start of Ramadan' },
  { date: '2025-03-31', name: 'Eid al-Fitr' },
  { date: '2025-04-01', name: 'Eid al-Fitr (2nd day)' },
  { date: '2025-04-02', name: 'Eid al-Fitr (3rd day)' },
  { date: '2025-06-07', name: 'Eid al-Adha (Bakra Eid)' },
  { date: '2025-06-08', name: 'Eid al-Adha (2nd day)' },
  { date: '2025-06-09', name: 'Eid al-Adha (3rd day)' },
  { date: '2025-06-28', name: 'Islamic New Year (1447 Hijri)' },
  { date: '2025-09-04', name: 'Eid Milad-un-Nabi (Prophet\'s Birthday)' }
];

// Generate Sundays for 2025
export const generateSundays = (year = 2025) => {
  const sundays = [];
  const date = new Date(year, 0, 1); // January 1st of the year
  
  // Find the first Sunday
  while (date.getDay() !== 0) {
    date.setDate(date.getDate() + 1);
  }
  
  // Add all Sundays of the year
  while (date.getFullYear() === year) {
    const formattedDate = date.toISOString().split('T')[0]; // YYYY-MM-DD format
    sundays.push({ date: formattedDate, name: 'Sunday', type: 'weekly' });
    date.setDate(date.getDate() + 7); // Move to next Sunday
  }
  
  return sundays;
};

// Pakistani government holidays for 2025
export const pakistaniHolidays2025 = [
  { date: '2025-02-05', name: 'Kashmir Day', type: 'national' },
  { date: '2025-03-23', name: 'Pakistan Day', type: 'national' },
  { date: '2025-08-14', name: 'Independence Day', type: 'national' },
  { date: '2025-09-11', name: 'Quaid-e-Azam Day', type: 'national' },
  { date: '2025-11-09', name: 'Iqbal Day', type: 'national' }
];

// Google Calendar Integration
// This will be used to fetch updated holiday data
export const fetchGoogleCalendarEvents = async (calendarId) => {
  try {
    // In a real implementation, this would use the Google Calendar API
    // Example implementation with the actual API:
    // const apiKey = process.env.GOOGLE_CALENDAR_API_KEY;
    // const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events?key=${apiKey}`;
    // const response = await fetch(url);
    // const data = await response.json();
    // return data.items.map(item => ({
    //   date: item.start.date,
    //   name: item.summary,
    //   type: item.description || 'custom'
    // }));
    
    // For now, return a placeholder that would be replaced by actual API call
    console.log('Fetching calendar data from:', calendarId);
    return [];
  } catch (error) {
    console.error('Error fetching Google Calendar events:', error);
    return [];
  }
};

// Get all holidays from different sources
export const getAllHolidays = async (calendarId = 'islamic.holidays@gmail.com') => {
  const googleEvents = await fetchGoogleCalendarEvents(calendarId);
  
  return [
    ...islamicHolidays2025,
    ...generateSundays(),
    ...pakistaniHolidays2025,
    ...googleEvents
  ];
};

// Check if a date is a holiday - asynchronous to accommodate API calls
export const isHoliday = async (dateString, calendarId) => {
  const allHolidays = await getAllHolidays(calendarId);
  return allHolidays.some(holiday => holiday.date === dateString);
};

// Get holiday name if it exists - asynchronous
export const getHolidayName = async (dateString, calendarId) => {
  const allHolidays = await getAllHolidays(calendarId);
  const holiday = allHolidays.find(holiday => holiday.date === dateString);
  return holiday ? holiday.name : null;
};

// Export Google Calendar subscription link for administrators
export const getGoogleCalendarSubscribeUrl = (calendarId = 'islamic.holidays@gmail.com') => {
  return `https://calendar.google.com/calendar/u/0?cid=${encodeURIComponent(calendarId)}`;
};

// Function to automatically mark attendance on holidays
export const autoMarkHoliday = async (date, attendanceService, teacherId) => {
  const dateString = typeof date === 'string' ? date : date.toISOString().split('T')[0];
  
  if (await isHoliday(dateString)) {
    const holidayName = await getHolidayName(dateString) || 'Holiday';
    
    // Create holiday attendance record
    const attendanceData = {
      teacherId,
      date: dateString,
      status: 'holiday', // Special status for holidays
      comment: `Automatic entry: ${holidayName}`,
      autoGenerated: true
    };
    
    // Save using the attendance service
    try {
      await attendanceService.addAttendanceRecord(attendanceData);
      console.log(`Automatically marked holiday for ${dateString}: ${holidayName}`);
      return true;
    } catch (error) {
      console.error('Error auto-marking holiday attendance:', error);
      return false;
    }
  }
  
  return false; // Not a holiday
};

export default {
  islamicHolidays2025,
  generateSundays,
  pakistaniHolidays2025,
  getAllHolidays,
  isHoliday,
  getHolidayName,
  fetchGoogleCalendarEvents,
  getGoogleCalendarSubscribeUrl,
  autoMarkHoliday
}; 